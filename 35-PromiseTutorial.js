 –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç promise? 

1‚É£–û–∂–∏–¥–∞–Ω–∏–µ (Pending)
–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω–æ–µ.
2‚É£–ò—Å–ø–æ–ª–Ω–µ–Ω–æ (Fulfilled)
–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.
3‚É£–û—Ç–∫–ª–æ–Ω–µ–Ω–æ (Rejected)
–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π.

üö©–ö–∞–∫ —Å–æ–∑–¥–∞—ë—Ç—Å—è

–ü—Ä–æ–º–∏—Å —Å–æ–∑–¥–∞—ë—Ç—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ Promise, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å –¥–≤—É–º—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: resolve –∏ reject. –≠—Ç–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —è–≤–ª—è—é—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω—è—é—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞.
const myPromise = new Promise((resolve, reject) => {
  // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
  setTimeout(() => {
    const success = true;
    
    if (success) {
      resolve('–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } else {
      reject('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }, 1000);
});

üö©–ú–µ—Ç–æ–¥—ã –ø—Ä–æ–º–∏—Å–æ–≤

–ü—Ä–æ–º–∏—Å—ã –∏–º–µ—é—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–≤–æ–ª—è—é—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.

üü†then
–ú–µ—Ç–æ–¥ then –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–º–∏—Å–∞ (—Å–æ—Å—Ç–æ—è–Ω–∏–µ Fulfilled). –û–Ω –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: –ø–µ—Ä–≤—ã–π ‚Äî —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –≤—Ç–æ—Ä–æ–π ‚Äî —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π).
myPromise.then(result => {
  console.log(result); // '–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
}).catch(error => {
  console.error(error);
});

üü†catch
–ú–µ—Ç–æ–¥ catch –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–∏—Å–∞ (—Å–æ—Å—Ç–æ—è–Ω–∏–µ Rejected). –û–Ω –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ.
myPromise.catch(error => {
  console.error(error); // '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
});

üü†finally
–ú–µ—Ç–æ–¥ finally –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–º–∏—Å–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –±—ã–ª –æ–Ω –∏—Å–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—ë–Ω. –û–Ω –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤).
myPromise.finally(() => {
  console.log('–ü—Ä–æ–º–∏—Å –∑–∞–≤–µ—Ä—à—ë–Ω'); // –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
});

üü†–¶–µ–ø–æ—á–∫–∞ –ø—Ä–æ–º–∏—Å–æ–≤
–ú–µ—Ç–æ–¥—ã then –∏ catch –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –Ω–æ–≤—ã–µ –ø—Ä–æ–º–∏—Å—ã, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ü–µ–ø–æ—á–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
myPromise
  .then(result => {
    console.log(result); // '–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
    return '–°–ª–µ–¥—É—é—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç';
  })
  .then(nextResult => {
    console.log(nextResult); // '–°–ª–µ–¥—É—é—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç'
  })
  .catch(error => {
    console.error(error); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø—Ä–æ–º–∏—Å–æ–≤
  });

üö©–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–∏—Å–æ–≤

function fetchData(url) {
  return new Promise((resolve, reject) => {
    const xhr = new XMLHttpRequest();
    xhr.open('GET', url);
    xhr.onload = () => {
      if (xhr.status === 200) {
        resolve(JSON.parse(xhr.responseText));
      } else {
        reject(`–û—à–∏–±–∫–∞: ${xhr.status}`);
      }
    };
    xhr.onerror = () => reject('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    xhr.send();
  });
}

fetchData('https://api.example.com/data')
  .then(data => {
    console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', data);
  })
  .catch(error => {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
  });
